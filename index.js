// Generated by CoffeeScript 1.9.2
var R, fs, get, getPreset, isThere, nocomments, obtain, path, sourcegate;

require("source-map-support").install();

R = require("ramda");

fs = require("fs");

path = require("path");

isThere = require("is-there");

sourcegate = require("sourcegate");

nocomments = require("strip-json-comments");

obtain = function(somewhere) {
  return JSON.parse(nocomments(fs.readFileSync(path.normalize(somewhere)).toString()));
};

get = function(what, module) {
  var e, where;
  where = ["node_modules/" + what, "node_modules/" + module + "/node_modules/" + what, "node_modules/beverage/node_modules/" + module + "/node_modules/" + what];
  try {
    return obtain(where[0]);
  } catch (_error) {
    try {
      return obtain(where[1]);
    } catch (_error) {
      try {
        return obtain(where[2]);
      } catch (_error) {
        e = _error;
        console.error(e);
        throw new Error("Could not find preset at: " + where);
      }
    }
  }
};

getPreset = function(tool, name, module) {
  var presets, ref;
  presets = {
    jscs: "jscs/presets",
    jshint: {
      airbnb: "airbnb-style/linters/jshintrc"
    },
    eslint: {
      airbnb: "airbnb-style/linters/eslintrc"
    },
    coffeelint: {
      "coffeescript-style-guide": "coffeescript-style-guide/coffeelint.json"
    }
  };
  if (tool === "jscs") {
    return get(presets.jscs + "/" + name + ".json", module);
  } else if (((ref = presets[tool]) != null ? ref[name] : void 0) != null) {
    return get(presets[tool][name], module);
  } else {
    return {};
  }
};

module.exports = function(o, gulp) {
  var base, config, empty, filerc, i, len, module, prefix, preset, ready, ref, res, sg, sources, watch;
  if (o == null) {
    o = {};
  }
  empty = [[], {}];
  if (R.is(Array, o.sourcegate)) {
    if (R.isEmpty(o.sourcegate)) {
      return [empty];
    }
  } else {
    return [empty];
  }
  ready = [];
  watch = [];
  ref = o.sourcegate;
  for (i = 0, len = ref.length; i < len; i++) {
    sg = ref[i];
    res = R.clone(empty);
    if (sg.options == null) {
      sg.options = {};
    }
    if (sg.recipe == null) {
      res = [sg.sources, sg.options];
    } else {
      sources = [];
      module = sg.module || o.sourcegateModule;
      prefix = sg.prefix || o.sourcegatePrefix || '';
      preset = sg.preset || o.sourcegatePreset;
      if (preset != null) {
        sources.push(getPreset(sg.recipe, preset, module));
      }
      filerc = sg.recipe === "coffeelint" ? "coffeelint.json" : "." + sg.recipe + "rc";
      config = "" + prefix + filerc;
      if (module) {
        config = "node_modules/" + module + "/" + config;
      }
      config = path.normalize(config);
      if (isThere(config)) {
        if (o.sourcegateWatch) {
          watch.push(config);
        }
        sources.push(config);
      }
      if ((base = sg.options).write == null) {
        base.write = {};
      }
      sg.options.write.path = filerc;
      if (sg.sources != null) {
        sources.concat(sg.sources);
      }
      res = [sources, sg.options];
    }
    ready.push(res);
  }
  if (gulp != null) {
    gulp.task("sourcegate", "Write sourcegate targets.", function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = ready.length; j < len1; j++) {
        sg = ready[j];
        results.push(sourcegate.apply(null, sg));
      }
      return results;
    });
    if (o.sourcegateWatch) {
      gulp.task("sourcegate:watch", "Watch sourcegate sources for changes.", function() {
        return gulp.watch(watch, ["sourcegate"]);
      });
    }
  }
  return ready;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLG9FQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLENBQ0EsR0FBSSxPQUFBLENBQVEsT0FBUixDQURKLENBQUE7O0FBQUEsRUFFQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBRkwsQ0FBQTs7QUFBQSxJQUdBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FIUCxDQUFBOztBQUFBLE9BSUEsR0FBVSxPQUFBLENBQVEsVUFBUixDQUpWLENBQUE7O0FBQUEsVUFLQSxHQUFhLE9BQUEsQ0FBUSxZQUFSLENBTGIsQ0FBQTs7QUFBQSxVQU1BLEdBQWEsT0FBQSxDQUFRLHFCQUFSLENBTmIsQ0FBQTs7QUFBQSxNQVVBLEdBQVMsU0FBQyxTQUFELEdBQUE7U0FDUCxJQUFJLENBQUMsS0FBTCxDQUFXLFVBQUEsQ0FBVyxFQUFFLENBQUMsWUFBSCxDQUFnQixJQUFJLENBQUMsU0FBTCxDQUFlLFNBQWYsQ0FBaEIsQ0FBeUMsQ0FBQyxRQUExQyxDQUFBLENBQVgsQ0FBWCxFQURPO0FBQUEsQ0FWVCxDQUFBOztBQUFBLEdBYUEsR0FBTSxTQUFDLElBQUQsRUFBTyxNQUFQLEdBQUE7QUFDSixNQUFBLFFBQUE7QUFBQSxFQUFBLEtBQUEsR0FBUSxDQUNOLGVBQUEsR0FBZ0IsSUFEVixFQUVOLGVBQUEsR0FBZ0IsTUFBaEIsR0FBdUIsZ0JBQXZCLEdBQXVDLElBRmpDLEVBR04scUNBQUEsR0FBc0MsTUFBdEMsR0FBNkMsZ0JBQTdDLEdBQTZELElBSHZELENBQVIsQ0FBQTtBQU1BO1dBQ0UsTUFBQSxDQUFPLEtBQU0sQ0FBQSxDQUFBLENBQWIsRUFERjtHQUFBLGNBQUE7QUFHRTthQUNFLE1BQUEsQ0FBTyxLQUFNLENBQUEsQ0FBQSxDQUFiLEVBREY7S0FBQSxjQUFB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QUFBLElBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsRUFDRSx1Q0FERixFQUMyQyxTQUFBLEdBQUE7ZUFDdkMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFYLEVBQWtCLENBQUMsWUFBRCxDQUFsQixFQUR1QztNQUFBLENBRDNDLENBQUEsQ0FERjtLQUpGO0dBckNBO1NBOENBLE1BL0NlO0FBQUEsQ0FsRGpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLmluc3RhbGwoKVxuUiA9IHJlcXVpcmUoXCJyYW1kYVwiKVxuZnMgPSByZXF1aXJlKFwiZnNcIilcbnBhdGggPSByZXF1aXJlKFwicGF0aFwiKVxuaXNUaGVyZSA9IHJlcXVpcmUoXCJpcy10aGVyZVwiKVxuc291cmNlZ2F0ZSA9IHJlcXVpcmUoXCJzb3VyY2VnYXRlXCIpXG5ub2NvbW1lbnRzID0gcmVxdWlyZShcInN0cmlwLWpzb24tY29tbWVudHNcIilcbiNndXRpbCA9IHJlcXVpcmUoXCJndWxwLXV0aWxcIikgIyBrZWVwIGNvbW1lbmVkLW91dCBvciBtb3ZlIHRvIGRlcGVuZGVuY2llc1xuXG5cbm9idGFpbiA9IChzb21ld2hlcmUpIC0+XG4gIEpTT04ucGFyc2Ugbm9jb21tZW50cyBmcy5yZWFkRmlsZVN5bmMocGF0aC5ub3JtYWxpemUgc29tZXdoZXJlKS50b1N0cmluZygpXG5cbmdldCA9ICh3aGF0LCBtb2R1bGUpIC0+XG4gIHdoZXJlID0gW1xuICAgIFwibm9kZV9tb2R1bGVzLyN7d2hhdH1cIixcbiAgICBcIm5vZGVfbW9kdWxlcy8je21vZHVsZX0vbm9kZV9tb2R1bGVzLyN7d2hhdH1cIixcbiAgICBcIm5vZGVfbW9kdWxlcy9iZXZlcmFnZS9ub2RlX21vZHVsZXMvI3ttb2R1bGV9L25vZGVfbW9kdWxlcy8je3doYXR9XCJcbiAgXVxuXG4gIHRyeVxuICAgIG9idGFpbiB3aGVyZVswXVxuICBjYXRjaFxuICAgIHRyeVxuICAgICAgb2J0YWluIHdoZXJlWzFdXG4gICAgY2F0Y2hcbiAgICAgIHRyeVxuICAgICAgICBvYnRhaW4gd2hlcmVbMl1cbiAgICAgIGNhdGNoIGVcbiAgICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJDb3VsZCBub3QgZmluZCBwcmVzZXQgYXQ6ICN7d2hlcmV9XCJcblxuXG5nZXRQcmVzZXQgPSAodG9vbCwgbmFtZSwgbW9kdWxlKSAtPlxuICBwcmVzZXRzID1cbiAgICBqc2NzOiBcImpzY3MvcHJlc2V0c1wiICN7cHJlc2V0fS5qc29uIHdpbGwgYmUgYXBwZW5kZWRcbiAgICBqc2hpbnQ6XG4gICAgICBhaXJibmI6IFwiYWlyYm5iLXN0eWxlL2xpbnRlcnMvanNoaW50cmNcIlxuICAgIGVzbGludDpcbiAgICAgIGFpcmJuYjogXCJhaXJibmItc3R5bGUvbGludGVycy9lc2xpbnRyY1wiXG4gICAgY29mZmVlbGludDpcbiAgICAgIFwiY29mZmVlc2NyaXB0LXN0eWxlLWd1aWRlXCI6IFwiY29mZmVlc2NyaXB0LXN0eWxlLWd1aWRlL2NvZmZlZWxpbnQuanNvblwiXG5cbiAgaWYgdG9vbCBpcyBcImpzY3NcIlxuICAgIGdldChcIiN7cHJlc2V0cy5qc2NzfS8je25hbWV9Lmpzb25cIiwgbW9kdWxlKVxuICBlbHNlIGlmIHByZXNldHNbdG9vbF0/W25hbWVdP1xuICAgIGdldChwcmVzZXRzW3Rvb2xdW25hbWVdLCBtb2R1bGUpXG4gIGVsc2Uge31cblxuXG5tb2R1bGUuZXhwb3J0cyA9IChvID0ge30sIGd1bHApIC0+XG4gIGVtcHR5ID0gW1tdLCB7fV1cbiAgaWYgUi5pcyhBcnJheSwgby5zb3VyY2VnYXRlKVxuICAgIGlmIFIuaXNFbXB0eShvLnNvdXJjZWdhdGUpIHRoZW4gcmV0dXJuIFtlbXB0eV1cbiAgZWxzZSByZXR1cm4gW2VtcHR5XSAjIG9yIHRocm93P1xuICByZWFkeSA9IFtdXG4gIHdhdGNoID0gW11cblxuICBmb3Igc2cgaW4gby5zb3VyY2VnYXRlXG4gICAgcmVzID0gUi5jbG9uZShlbXB0eSlcbiAgICBzZy5vcHRpb25zID89IHt9XG5cbiAgICB1bmxlc3Mgc2cucmVjaXBlP1xuICAgICAgcmVzID0gW3NnLnNvdXJjZXMsIHNnLm9wdGlvbnNdXG4gICAgZWxzZVxuICAgICAgc291cmNlcyA9IFtdXG4gICAgICBtb2R1bGUgPSBzZy5tb2R1bGUgb3Igby5zb3VyY2VnYXRlTW9kdWxlXG4gICAgICBwcmVmaXggPSBzZy5wcmVmaXggb3Igby5zb3VyY2VnYXRlUHJlZml4IG9yICcnXG4gICAgICBwcmVzZXQgPSBzZy5wcmVzZXQgb3Igby5zb3VyY2VnYXRlUHJlc2V0XG4gICAgICAjIDEuIHN0YXJ0IHdpdGggcHJlc2V0IChzb21ldGhpbmcga25vd24gLyBzdGFuZGFyZClcbiAgICAgIHNvdXJjZXMucHVzaCBnZXRQcmVzZXQoc2cucmVjaXBlLCBwcmVzZXQsIG1vZHVsZSkgaWYgcHJlc2V0P1xuICAgICAgZmlsZXJjID0gaWYgc2cucmVjaXBlIGlzIFwiY29mZmVlbGludFwiIHRoZW4gXCJjb2ZmZWVsaW50Lmpzb25cIiBlbHNlIFwiLiN7c2cucmVjaXBlfXJjXCJcbiAgICAgIGNvbmZpZyA9IFwiI3twcmVmaXh9I3tmaWxlcmN9XCJcbiAgICAgIGNvbmZpZyA9IFwibm9kZV9tb2R1bGVzLyN7bW9kdWxlfS8je2NvbmZpZ31cIiBpZiBtb2R1bGVcbiAgICAgIGNvbmZpZyA9IHBhdGgubm9ybWFsaXplKGNvbmZpZylcbiAgICAgICMgMi4gb3ZlcnJpZGUgd2l0aCBhIG1vZHVsZSBjb25maWcgKGFueWJvZHkgY2FuIGhhdmUgcHJlc2V0cylcbiAgICAgIGlmIGlzVGhlcmUgY29uZmlnXG4gICAgICAgIGlmIG8uc291cmNlZ2F0ZVdhdGNoXG4gICAgICAgICAgd2F0Y2gucHVzaCBjb25maWdcbiAgICAgICAgc291cmNlcy5wdXNoIGNvbmZpZ1xuICAgICAgc2cub3B0aW9ucy53cml0ZSA/PSB7fVxuICAgICAgc2cub3B0aW9ucy53cml0ZS5wYXRoID0gZmlsZXJjXG4gICAgICAjIDMuIHNvdXJjZXMsIHdoZXRoZXIgYW4gb2JqZWN0IG9yIGFycmF5LCBiZWNvbWUgdGhlIGZpbmFsIG92ZXJyaWRlXG4gICAgICBzb3VyY2VzLmNvbmNhdChzZy5zb3VyY2VzKSBpZiBzZy5zb3VyY2VzP1xuICAgICAgcmVzID0gW3NvdXJjZXMsIHNnLm9wdGlvbnNdXG5cbiAgICByZWFkeS5wdXNoIHJlc1xuXG4gIGlmIGd1bHA/XG4gICAgZ3VscC50YXNrIFwic291cmNlZ2F0ZVwiLCBcIldyaXRlIHNvdXJjZWdhdGUgdGFyZ2V0cy5cIiwgLT5cbiAgICAgIGZvciBzZyBpbiByZWFkeVxuICAgICAgICBzb3VyY2VnYXRlLmFwcGx5KG51bGwsIHNnKVxuICAgIGlmIG8uc291cmNlZ2F0ZVdhdGNoXG4gICAgICBndWxwLnRhc2sgXCJzb3VyY2VnYXRlOndhdGNoXCIsXG4gICAgICAgIFwiV2F0Y2ggc291cmNlZ2F0ZSBzb3VyY2VzIGZvciBjaGFuZ2VzLlwiLCAtPlxuICAgICAgICAgIGd1bHAud2F0Y2ggd2F0Y2gsIFtcInNvdXJjZWdhdGVcIl1cblxuICByZWFkeVxuIl19