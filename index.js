// Generated by CoffeeScript 1.9.3
var R, fs, get, getPreset, isThere, nocomments, obtain, path, sourcegate, task;

require("source-map-support").install();

R = require("ramda");

fs = require("fs");

path = require("path");

isThere = require("is-there");

sourcegate = require("sourcegate");

nocomments = require("strip-json-comments");

task = require("stamina").gulpTask;

obtain = function(somewhere) {
  return JSON.parse(nocomments(fs.readFileSync(path.normalize(somewhere)).toString()));
};

get = function(what, module) {
  var e, i, j, last, ref, where;
  where = ["node_modules/" + what, "node_modules/" + module + "/node_modules/" + what, "node_modules/beverage/node_modules/" + module + "/node_modules/" + what];
  last = where.length - 1;
  for (i = j = 0, ref = last; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    try {
      return obtain(where[i]);
    } catch (_error) {
      e = _error;
      if (i === last) {
        console.error(e);
        throw new Error("Could not find preset at: " + where);
      }
      continue;
    }
  }
};

getPreset = function(tool, name, module) {
  var presets, ref;
  presets = {
    jscs: "jscs/presets",
    jshint: {
      airbnb: "airbnb-style/linters/jshintrc"
    },
    eslint: {
      airbnb: "airbnb-style/linters/.eslintrc"
    },
    coffeelint: {
      "coffeescript-style-guide": "coffeescript-style-guide/coffeelint.json"
    }
  };
  if (tool === "jscs") {
    return get(presets.jscs + "/" + name + ".json", module);
  } else if (((ref = presets[tool]) != null ? ref[name] : void 0) != null) {
    return get(presets[tool][name], module);
  } else {
    return {};
  }
};

module.exports = function(o, gulp) {
  var base, config, empty, filerc, j, len, module, prefix, preset, ready, ref, res, sg, sources, watch;
  if (o == null) {
    o = {};
  }
  empty = [[], {}];
  if (R.is(Array, o.sourcegate)) {
    if (R.isEmpty(o.sourcegate)) {
      return [empty];
    }
  } else {
    return [empty];
  }
  ready = [];
  watch = [];
  ref = o.sourcegate;
  for (j = 0, len = ref.length; j < len; j++) {
    sg = ref[j];
    res = R.clone(empty);
    if (sg.options == null) {
      sg.options = {};
    }
    if (sg.recipe == null) {
      res = [sg.sources, sg.options];
    } else {
      sources = [];
      module = sg.module || o.sourcegateModule;
      prefix = sg.prefix || o.sourcegatePrefix || '';
      preset = sg.preset || o.sourcegatePreset;
      if (preset != null) {
        sources.push(getPreset(sg.recipe, preset, module));
      }
      filerc = sg.recipe === "coffeelint" ? "coffeelint.json" : "." + sg.recipe + "rc";
      if (module != null) {
        config = "" + prefix + filerc;
        if (module) {
          config = "node_modules/" + module + "/" + config;
        }
        config = path.normalize(config);
        if (!isThere(config)) {
          console.error("Could not find: " + config);
        } else {
          if (o.sourcegateWatch) {
            watch.push(config);
          }
          sources.push(config);
        }
      }
      if ((base = sg.options).write == null) {
        base.write = {};
      }
      sg.options.write.path = filerc;
      if (sg.sources != null) {
        sources.concat(sg.sources);
      }
      res = [sources, sg.options];
    }
    ready.push(res);
  }
  if (gulp != null) {
    task(gulp, "sourcegate", "Write sourcegate targets.", function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = ready.length; k < len1; k++) {
        sg = ready[k];
        results.push(sourcegate.apply(null, sg));
      }
      return results;
    });
    if (o.sourcegateWatch) {
      task(gulp, "sourcegate:watch", "Watch sourcegate sources for changes.", function() {
        return gulp.watch(watch, ["sourcegate"]);
      });
    }
  }
  return ready;
};

//# sourceMappingURL=data:application/json;base64,