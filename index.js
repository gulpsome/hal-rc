// Generated by CoffeeScript 1.10.0
var R, fs, get, getPreset, isThere, logUse, logger, nocomments, obtain, path, sourcegate, task;

require("source-map-support").install();

R = require("ramda");

fs = require("fs");

path = require("path");

isThere = require("is-there");

sourcegate = require("sourcegate");

nocomments = require("strip-json-comments");

task = require("be-goods").gulpTask;

logger = require("be-goods").logger;

logUse = function(what) {
  if (what == null) {
    what = "";
  }
  if (process.argv[2] === "sourcegate") {
    return console.log(what);
  }
};

obtain = function(somewhere) {
  return JSON.parse(nocomments(fs.readFileSync(path.normalize(somewhere)).toString()));
};

get = function(what, module) {
  var e, error, gotIt, i, j, last, ref, where;
  where = ["node_modules/" + what, "node_modules/" + module + "/node_modules/" + what, "node_modules/beverage/node_modules/" + module + "/node_modules/" + what, "node_modules/beverage/node_modules/hal-rc/node_modules/" + what];
  last = where.length - 1;
  for (i = j = 0, ref = last; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    try {
      gotIt = obtain(where[i]);
      logUse("Source " + where[i]);
      return gotIt;
    } catch (error) {
      e = error;
      if (i === last) {
        logger.error(e);
        throw new Error("Could not find preset at: " + where);
      }
      continue;
    }
  }
};

getPreset = function(tool, name, module) {
  var presets, ref;
  presets = {
    jscs: "jscs/presets",
    jshint: {
      airbnb: "airbnb-style/linters/jshintrc"
    },
    eslint: {
      airbnb: "airbnb-style/linters/.eslintrc"
    },
    coffeelint: {
      "hal-coffeescript-style-guide": "hal-coffeescript-style-guide/coffeelint.json"
    }
  };
  if (tool === "jscs") {
    return get(presets.jscs + "/" + name + ".json", module);
  } else if (((ref = presets[tool]) != null ? ref[name] : void 0) != null) {
    return get(presets[tool][name], module);
  } else {
    return {};
  }
};

module.exports = function(o, gulp) {
  var base, config, empty, filerc, j, len, module, prefix, preset, ready, ref, res, sg, sources, watch;
  if (o == null) {
    o = {};
  }
  empty = [[], {}];
  if (R.is(Array, o.sourcegate)) {
    if (R.isEmpty(o.sourcegate)) {
      return [empty];
    }
  } else {
    return [empty];
  }
  if (o.sourceopt == null) {
    o.sourceopt = {};
  }
  ready = [];
  watch = [];
  ref = o.sourcegate;
  for (j = 0, len = ref.length; j < len; j++) {
    sg = ref[j];
    res = R.clone(empty);
    if (sg.options == null) {
      sg.options = {};
    }
    if (sg.recipe == null) {
      res = [sg.sources, sg.options];
    } else {
      logUse();
      logUse("For " + sg.recipe + ":");
      sources = [];
      module = sg.module || o.sourceopt.module;
      prefix = sg.prefix || o.sourceopt.prefix || '';
      preset = sg.preset || o.sourceopt.preset;
      if (preset != null) {
        sources.push(getPreset(sg.recipe, preset, module));
      }
      filerc = sg.recipe === "coffeelint" ? "coffeelint.json" : "." + sg.recipe + "rc";
      if ((module != null) && module !== '!') {
        config = "" + prefix + filerc;
        if (module) {
          config = "node_modules/" + module + "/" + config;
        }
        config = path.normalize(config);
        logUse("Source " + config);
        if (!isThere(config)) {
          logger.error("Could not find: " + config);
        } else {
          if (o.sourceopt.watch) {
            watch.push(config);
          }
          sources.push(config);
        }
      }
      if ((base = sg.options).write == null) {
        base.write = {};
      }
      sg.options.write.path = filerc;
      if (sg.sources != null) {
        sources = sources.concat(sg.sources);
      }
      res = [sources, sg.options];
    }
    ready.push(res);
  }
  if (gulp != null) {
    task(gulp, "sourcegate", "Write sourcegate targets.", function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = ready.length; k < len1; k++) {
        sg = ready[k];
        results.push(sourcegate.apply(null, sg));
      }
      return results;
    });
    if (o.sourceopt.watch) {
      task(gulp, "sourcegate:watch", "Watch sourcegate sources for changes.", function() {
        return gulp.watch(watch, ["sourcegate"]);
      });
    }
  }
  logUse();
  return ready;
};

//# sourceMappingURL=data:application/json;base64,