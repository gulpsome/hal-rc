// Generated by CoffeeScript 1.9.2
var R, detectHelp, fs, get, getPreset, isThere, nocomments, obtain, path, sourcegate;

require("source-map-support").install();

R = require("ramda");

fs = require("fs");

path = require("path");

isThere = require("is-there");

sourcegate = require("sourcegate");

nocomments = require("strip-json-comments");

detectHelp = function(gulpTasks) {
  return R.is(Object, R.path(['help', 'help'], gulpTasks));
};

obtain = function(somewhere) {
  return JSON.parse(nocomments(fs.readFileSync(path.normalize(somewhere)).toString()));
};

get = function(what, module) {
  var e, i, j, last, ref, where;
  where = ["node_modules/" + what, "node_modules/" + module + "/node_modules/" + what, "node_modules/beverage/node_modules/" + module + "/node_modules/" + what];
  last = where.length - 1;
  for (i = j = 0, ref = last; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    try {
      return obtain(where[i]);
    } catch (_error) {
      e = _error;
      if (i === last) {
        console.error(e);
        throw new Error("Could not find preset at: " + where);
      }
      continue;
    }
  }
};

getPreset = function(tool, name, module) {
  var presets, ref;
  presets = {
    jscs: "jscs/presets",
    jshint: {
      airbnb: "airbnb-style/linters/jshintrc"
    },
    eslint: {
      airbnb: "airbnb-style/linters/.eslintrc"
    },
    coffeelint: {
      "coffeescript-style-guide": "coffeescript-style-guide/coffeelint.json"
    }
  };
  if (tool === "jscs") {
    return get(presets.jscs + "/" + name + ".json", module);
  } else if (((ref = presets[tool]) != null ? ref[name] : void 0) != null) {
    return get(presets[tool][name], module);
  } else {
    return {};
  }
};

module.exports = function(o, gulp) {
  var base, config, empty, filerc, j, len, module, prefix, preset, ready, ref, res, sg, sources, watch;
  if (o == null) {
    o = {};
  }
  empty = [[], {}];
  if (R.is(Array, o.sourcegate)) {
    if (R.isEmpty(o.sourcegate)) {
      return [empty];
    }
  } else {
    return [empty];
  }
  ready = [];
  watch = [];
  ref = o.sourcegate;
  for (j = 0, len = ref.length; j < len; j++) {
    sg = ref[j];
    res = R.clone(empty);
    if (sg.options == null) {
      sg.options = {};
    }
    if (sg.recipe == null) {
      res = [sg.sources, sg.options];
    } else {
      sources = [];
      module = sg.module || o.sourcegateModule;
      prefix = sg.prefix || o.sourcegatePrefix || '';
      preset = sg.preset || o.sourcegatePreset;
      if (preset != null) {
        sources.push(getPreset(sg.recipe, preset, module));
      }
      filerc = sg.recipe === "coffeelint" ? "coffeelint.json" : "." + sg.recipe + "rc";
      if (module != null) {
        config = "" + prefix + filerc;
        if (module) {
          config = "node_modules/" + module + "/" + config;
        }
        config = path.normalize(config);
        if (!isThere(config)) {
          console.error("Could not find: " + config);
        } else {
          if (o.sourcegateWatch) {
            watch.push(config);
          }
          sources.push(config);
        }
      }
      if ((base = sg.options).write == null) {
        base.write = {};
      }
      sg.options.write.path = filerc;
      if (sg.sources != null) {
        sources.concat(sg.sources);
      }
      res = [sources, sg.options];
    }
    ready.push(res);
  }
  if (gulp != null) {
    if (!detectHelp(gulp.tasks)) {
      gulp = require("gulp-help")(gulp);
    }
    gulp.task("sourcegate", "Write sourcegate targets.", function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = ready.length; k < len1; k++) {
        sg = ready[k];
        results.push(sourcegate.apply(null, sg));
      }
      return results;
    });
    if (o.sourcegateWatch) {
      gulp.task("sourcegate:watch", "Watch sourcegate sources for changes.", function() {
        return gulp.watch(watch, ["sourcegate"]);
      });
    }
  }
  return ready;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLGdGQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLENBQ0EsR0FBSSxPQUFBLENBQVEsT0FBUixDQURKLENBQUE7O0FBQUEsRUFFQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBRkwsQ0FBQTs7QUFBQSxJQUdBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FIUCxDQUFBOztBQUFBLE9BSUEsR0FBVSxPQUFBLENBQVEsVUFBUixDQUpWLENBQUE7O0FBQUEsVUFLQSxHQUFhLE9BQUEsQ0FBUSxZQUFSLENBTGIsQ0FBQTs7QUFBQSxVQU1BLEdBQWEsT0FBQSxDQUFRLHFCQUFSLENBTmIsQ0FBQTs7QUFBQSxVQVNBLEdBQWEsU0FBQyxTQUFELEdBQUE7U0FDWCxDQUFDLENBQUMsRUFBRixDQUFLLE1BQUwsRUFBYSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBUCxFQUF5QixTQUF6QixDQUFiLEVBRFc7QUFBQSxDQVRiLENBQUE7O0FBQUEsTUFZQSxHQUFTLFNBQUMsU0FBRCxHQUFBO1NBQ1AsSUFBSSxDQUFDLEtBQUwsQ0FBVyxVQUFBLENBQVcsRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxTQUFmLENBQWhCLENBQXlDLENBQUMsUUFBMUMsQ0FBQSxDQUFYLENBQVgsRUFETztBQUFBLENBWlQsQ0FBQTs7QUFBQSxHQWVBLEdBQU0sU0FBQyxJQUFELEVBQU8sTUFBUCxHQUFBO0FBRUosTUFBQSx5QkFBQTtBQUFBLEVBQUEsS0FBQSxHQUFRLENBQ04sZUFBQSxHQUFnQixJQURWLEVBRU4sZUFBQSxHQUFnQixNQUFoQixHQUF1QixnQkFBdkIsR0FBdUMsSUFGakMsRUFHTixxQ0FBQSxHQUFzQyxN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REY7QUFBQSxHQVBBO0FBMENBLEVBQUEsSUFBRyxZQUFIO0FBQ0UsSUFBQSxJQUFBLENBQUEsVUFBTyxDQUFXLElBQUksQ0FBQyxLQUFoQixDQUFQO0FBRUUsTUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLFdBQVIsQ0FBQSxDQUFxQixJQUFyQixDQUFQLENBRkY7S0FBQTtBQUFBLElBSUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxZQUFWLEVBQXdCLDJCQUF4QixFQUFxRCxTQUFBLEdBQUE7QUFDbkQsVUFBQSxnQkFBQTtBQUFBO1dBQUEseUNBQUE7c0JBQUE7QUFDRSxxQkFBQSxVQUFVLENBQUMsS0FBWCxDQUFpQixJQUFqQixFQUF1QixFQUF2QixFQUFBLENBREY7QUFBQTtxQkFEbUQ7SUFBQSxDQUFyRCxDQUpBLENBQUE7QUFPQSxJQUFBLElBQUcsQ0FBQyxDQUFDLGVBQUw7QUFDRSxNQUFBLElBQUksQ0FBQyxJQUFMLENBQVUsa0JBQVYsRUFDRSx1Q0FERixFQUMyQyxTQUFBLEdBQUE7ZUFDdkMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFYLEVBQWtCLENBQUMsWUFBRCxDQUFsQixFQUR1QztNQUFBLENBRDNDLENBQUEsQ0FERjtLQVJGO0dBMUNBO1NBdURBLE1BeERlO0FBQUEsQ0FuRGpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLmluc3RhbGwoKVxuUiA9IHJlcXVpcmUoXCJyYW1kYVwiKVxuZnMgPSByZXF1aXJlKFwiZnNcIilcbnBhdGggPSByZXF1aXJlKFwicGF0aFwiKVxuaXNUaGVyZSA9IHJlcXVpcmUoXCJpcy10aGVyZVwiKVxuc291cmNlZ2F0ZSA9IHJlcXVpcmUoXCJzb3VyY2VnYXRlXCIpXG5ub2NvbW1lbnRzID0gcmVxdWlyZShcInN0cmlwLWpzb24tY29tbWVudHNcIilcbiNndXRpbCA9IHJlcXVpcmUoXCJndWxwLXV0aWxcIikgIyBrZWVwIGNvbW1lbmVkLW91dCBvciBtb3ZlIHRvIGRlcGVuZGVuY2llc1xuXG5kZXRlY3RIZWxwID0gKGd1bHBUYXNrcykgLT5cbiAgUi5pcyhPYmplY3QsIFIucGF0aChbJ2hlbHAnLCAnaGVscCddLCBndWxwVGFza3MpKVxuXG5vYnRhaW4gPSAoc29tZXdoZXJlKSAtPlxuICBKU09OLnBhcnNlIG5vY29tbWVudHMgZnMucmVhZEZpbGVTeW5jKHBhdGgubm9ybWFsaXplIHNvbWV3aGVyZSkudG9TdHJpbmcoKVxuXG5nZXQgPSAod2hhdCwgbW9kdWxlKSAtPlxuICAjIGd1dGlsLmxvZyBcImZpbmQgd2hhdCAnI3t3aGF0fScgaW4gbW9kdWxlICcje21vZHVsZX0nXCJcbiAgd2hlcmUgPSBbXG4gICAgXCJub2RlX21vZHVsZXMvI3t3aGF0fVwiLFxuICAgIFwibm9kZV9tb2R1bGVzLyN7bW9kdWxlfS9ub2RlX21vZHVsZXMvI3t3aGF0fVwiLFxuICAgIFwibm9kZV9tb2R1bGVzL2JldmVyYWdlL25vZGVfbW9kdWxlcy8je21vZHVsZX0vbm9kZV9tb2R1bGVzLyN7d2hhdH1cIlxuICBdXG5cbiAgbGFzdCA9IHdoZXJlLmxlbmd0aCAtIDFcbiAgZm9yIGkgaW4gWzAuLmxhc3RdXG4gICAgdHJ5XG4gICAgICByZXR1cm4gb2J0YWluIHdoZXJlW2ldXG4gICAgY2F0Y2ggZVxuICAgICAgaWYgaSBpcyBsYXN0XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiQ291bGQgbm90IGZpbmQgcHJlc2V0IGF0OiAje3doZXJlfVwiXG4gICAgICBjb250aW51ZVxuXG5cbmdldFByZXNldCA9ICh0b29sLCBuYW1lLCBtb2R1bGUpIC0+XG4gIHByZXNldHMgPVxuICAgIGpzY3M6IFwianNjcy9wcmVzZXRzXCIgI3twcmVzZXR9Lmpzb24gd2lsbCBiZSBhcHBlbmRlZFxuICAgIGpzaGludDpcbiAgICAgIGFpcmJuYjogXCJhaXJibmItc3R5bGUvbGludGVycy9qc2hpbnRyY1wiXG4gICAgZXNsaW50OlxuICAgICAgYWlyYm5iOiBcImFpcmJuYi1zdHlsZS9saW50ZXJzLy5lc2xpbnRyY1wiXG4gICAgY29mZmVlbGludDpcbiAgICAgIFwiY29mZmVlc2NyaXB0LXN0eWxlLWd1aWRlXCI6IFwiY29mZmVlc2NyaXB0LXN0eWxlLWd1aWRlL2NvZmZlZWxpbnQuanNvblwiXG5cbiAgaWYgdG9vbCBpcyBcImpzY3NcIlxuICAgIGdldChcIiN7cHJlc2V0cy5qc2NzfS8je25hbWV9Lmpzb25cIiwgbW9kdWxlKVxuICBlbHNlIGlmIHByZXNldHNbdG9vbF0/W25hbWVdP1xuICAgIGdldChwcmVzZXRzW3Rvb2xdW25hbWVdLCBtb2R1bGUpXG4gIGVsc2Uge31cblxuXG5tb2R1bGUuZXhwb3J0cyA9IChvID0ge30sIGd1bHApIC0+XG4gIGVtcHR5ID0gW1tdLCB7fV1cbiAgaWYgUi5pcyhBcnJheSwgby5zb3VyY2VnYXRlKVxuICAgIGlmIFIuaXNFbXB0eShvLnNvdXJjZWdhdGUpIHRoZW4gcmV0dXJuIFtlbXB0eV1cbiAgZWxzZSByZXR1cm4gW2VtcHR5XSAjIG9yIHRocm93P1xuICByZWFkeSA9IFtdXG4gIHdhdGNoID0gW11cblxuICBmb3Igc2cgaW4gby5zb3VyY2VnYXRlXG4gICAgcmVzID0gUi5jbG9uZShlbXB0eSlcbiAgICBzZy5vcHRpb25zID89IHt9XG5cbiAgICB1bmxlc3Mgc2cucmVjaXBlP1xuICAgICAgIyAwLiB3aXRob3V0IGEgcmVjaXBlLCBoYWwtcmMganVzdCBoYW5kcyBzb3VyY2VzIGFuZCBvcHRpb25zIHRvIHNvdXJjZWdhdGVcbiAgICAgIHJlcyA9IFtzZy5zb3VyY2VzLCBzZy5vcHRpb25zXVxuICAgIGVsc2VcbiAgICAgIHNvdXJjZXMgPSBbXVxuICAgICAgbW9kdWxlID0gc2cubW9kdWxlIG9yIG8uc291cmNlZ2F0ZU1vZHVsZVxuICAgICAgcHJlZml4ID0gc2cucHJlZml4IG9yIG8uc291cmNlZ2F0ZVByZWZpeCBvciAnJ1xuICAgICAgcHJlc2V0ID0gc2cucHJlc2V0IG9yIG8uc291cmNlZ2F0ZVByZXNldFxuICAgICAgIyAxLiBzdGFydCB3aXRoIHByZXNldCAoc29tZXRoaW5nIGtub3duIC8gc3RhbmRhcmQpXG4gICAgICBzb3VyY2VzLnB1c2ggZ2V0UHJlc2V0KHNnLnJlY2lwZSwgcHJlc2V0LCBtb2R1bGUpIGlmIHByZXNldD9cbiAgICAgIGZpbGVyYyA9IGlmIHNnLnJlY2lwZSBpcyBcImNvZmZlZWxpbnRcIiB0aGVuIFwiY29mZmVlbGludC5qc29uXCIgZWxzZSBcIi4je3NnLnJlY2lwZX1yY1wiXG4gICAgICBpZiBtb2R1bGU/XG4gICAgICAgICMgMi4gb3ZlcnJpZGUgd2l0aCBhIG1vZHVsZSBjb25maWcgKGFueWJvZHkgY2FuIGhhdmUgcHJlc2V0cylcbiAgICAgICAgY29uZmlnID0gXCIje3ByZWZpeH0je2ZpbGVyY31cIlxuICAgICAgICBjb25maWcgPSBcIm5vZGVfbW9kdWxlcy8je21vZHVsZX0vI3tjb25maWd9XCIgaWYgbW9kdWxlICMgZmFsc2UgaXMgYSB2YWxpZCB2YWx1ZVxuICAgICAgICBjb25maWcgPSBwYXRoLm5vcm1hbGl6ZShjb25maWcpXG5cbiAgICAgICAgdW5sZXNzIGlzVGhlcmUgY29uZmlnXG4gICAgICAgICAgY29uc29sZS5lcnJvciBcIkNvdWxkIG5vdCBmaW5kOiAje2NvbmZpZ31cIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgaWYgby5zb3VyY2VnYXRlV2F0Y2hcbiAgICAgICAgICAgIHdhdGNoLnB1c2ggY29uZmlnXG4gICAgICAgICAgc291cmNlcy5wdXNoIGNvbmZpZ1xuICAgICAgc2cub3B0aW9ucy53cml0ZSA/PSB7fVxuICAgICAgc2cub3B0aW9ucy53cml0ZS5wYXRoID0gZmlsZXJjXG4gICAgICAjIDMuIHNvdXJjZXMsIHdoZXRoZXIgYW4gb2JqZWN0IG9yIGFycmF5LCBiZWNvbWUgdGhlIGZpbmFsIG92ZXJyaWRlXG4gICAgICBzb3VyY2VzLmNvbmNhdChzZy5zb3VyY2VzKSBpZiBzZy5zb3VyY2VzP1xuICAgICAgcmVzID0gW3NvdXJjZXMsIHNnLm9wdGlvbnNdXG5cbiAgICByZWFkeS5wdXNoIHJlc1xuXG4gIGlmIGd1bHA/XG4gICAgdW5sZXNzIGRldGVjdEhlbHAgZ3VscC50YXNrc1xuICAgICAgIyByZXF1aXJlZCBndWxwLWhlbHAgcGFja2FnZSBkZXBlbmRlY3lcbiAgICAgIGd1bHAgPSByZXF1aXJlKFwiZ3VscC1oZWxwXCIpKGd1bHApXG5cbiAgICBndWxwLnRhc2sgXCJzb3VyY2VnYXRlXCIsIFwiV3JpdGUgc291cmNlZ2F0ZSB0YXJnZXRzLlwiLCAtPlxuICAgICAgZm9yIHNnIGluIHJlYWR5XG4gICAgICAgIHNvdXJjZWdhdGUuYXBwbHkobnVsbCwgc2cpXG4gICAgaWYgby5zb3VyY2VnYXRlV2F0Y2hcbiAgICAgIGd1bHAudGFzayBcInNvdXJjZWdhdGU6d2F0Y2hcIixcbiAgICAgICAgXCJXYXRjaCBzb3VyY2VnYXRlIHNvdXJjZXMgZm9yIGNoYW5nZXMuXCIsIC0+XG4gICAgICAgICAgZ3VscC53YXRjaCB3YXRjaCwgW1wic291cmNlZ2F0ZVwiXVxuXG4gIHJlYWR5XG4iXX0=